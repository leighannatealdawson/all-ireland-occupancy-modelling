# ---------------------------
##### Libraries required #######
library(unmarked)
library(AHMbook)
#### 10.3 SIMULATION AND ANALYSIS OF THE SIMPLEST POSSIBLE SITE-OCCUPANCY MODEL ####
# 10.3 Simulation and analysis of the simplest possible site-occupancy model
# --------------------------------------------------------------------------
# Choose sample sizes and prepare observed data array y
set.seed(24)                  # So we all get same data set
M <- 100                      # Number of sites
J <- 2                        # Number of presence/absence measurements
y <- matrix(NA, nrow = M, ncol = J) # to contain the obs. data
View(y)
# Parameter values
psi <- 0.8                    # Probability of occupancy or presence
p <- 0.5                      # Probability of detection
# Generate presence/absence data (the truth)
z <- rbinom(n = M, size = 1, prob = psi)  # R has no Bernoulli
# Generate detection/nondetection data (i.e. presence/absence measurements)
for(j in 1:J){
y[,j] <- rbinom(n = M, size = 1, prob = z*p)
}
# Look at data
sum(z)                        # True number of occupied sites
sum(apply(y, 1, max))         # Observed number of occupied sites
head(cbind(z=z, y))           # Truth and measurements for first 6 sites
library(unmarked)
umf <- unmarkedFrameOccu(y = y)  # Create unmarked data frame
View(umf)
class(umf)
head(umf)
summary(umf)                     # Summarize data frame
(fm1 <- occu(~1 ~1, data = umf)) # Fit model
backTransform(fm1, "state")      # Get estimates on probability scale
backTransform(fm1, "det")
# Bundle data and summarize data bundle
str( win.data <- list(y = y, M = nrow(y), J = ncol(y)) )
# Specify model in BUGS language
sink("model.txt")
cat("
model {
# Priors
psi ~ dunif(0, 1)
p ~ dunif(0, 1)
# Likelihood
for (i in 1:M) {    # Loop over sites
z[i] ~ dbern(psi)         # State model
for (j in 1:J) { # Loop over replicate surveys
y[i,j] ~ dbern(z[i]*p)  # Observation model (only JAGS !)
# y[i,j] ~ dbern(mu[i])  # For WinBUGS define 'straw man'
}
# mu[i] <- z[i]*p          # Only WinBUGS
}
}
",fill = TRUE)
sink()
# Initial values
zst <- apply(y, 1, max)       # Avoid data/model/inits conflict
inits <- function(){list(z = zst)}
# Parameters monitored
params <- c("psi", "p")
# MCMC settings
ni <- 5000   ;   nt <- 1   ;   nb <- 1000   ;   nc <- 3
# Call JAGS and summarize posteriors
install.packages("jagsUI")
library(jagsUI)
fm2 <- jags(win.data, inits, params, "model.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb)
print(fm2, dig = 3)
# Setting up your environment
# ---------------------------
##### Libraries required #######
library(unmarked)
library(AHMbook)
#### 10.3 SIMULATION AND ANALYSIS OF THE SIMPLEST POSSIBLE SITE-OCCUPANCY MODEL ####
# 10.3 Simulation and analysis of the simplest possible site-occupancy model
# --------------------------------------------------------------------------
# Choose sample sizes and prepare observed data array y
set.seed(24)                  # So we all get same data set
M <- 100                      # Number of sites
J <- 2                        # Number of presence/absence measurements
y <- matrix(NA, nrow = M, ncol = J) # to contain the obs. data
View(y)
# Parameter values
psi <- 0.8                    # Probability of occupancy or presence
p <- 0.5                      # Probability of detection
# Generate presence/absence data (the truth)
z <- rbinom(n = M, size = 1, prob = psi)  # R has no Bernoulli
# Generate detection/nondetection data (i.e. presence/absence measurements)
for(j in 1:J){
y[,j] <- rbinom(n = M, size = 1, prob = z*p)
}
# Look at data
sum(z)                        # True number of occupied sites
sum(apply(y, 1, max))         # Observed number of occupied sites
head(cbind(z=z, y))           # Truth and measurements for first 6 sites
library(unmarked)
umf <- unmarkedFrameOccu(y = y)  # Create unmarked data frame
View(umf)
class(umf)
head(umf)
summary(umf)                     # Summarize data frame
(fm1 <- occu(~1 ~1, data = umf)) # Fit model
backTransform(fm1, "state")      # Get estimates on probability scale
backTransform(fm1, "det")
# Bundle data and summarize data bundle
str( win.data <- list(y = y, M = nrow(y), J = ncol(y)) )
# Specify model in BUGS language
sink("model.txt")
cat("
model {
# Priors
psi ~ dunif(0, 1)
p ~ dunif(0, 1)
# Likelihood
for (i in 1:M) {    # Loop over sites
z[i] ~ dbern(psi)         # State model
for (j in 1:J) { # Loop over replicate surveys
y[i,j] ~ dbern(z[i]*p)  # Observation model (only JAGS !)
# y[i,j] ~ dbern(mu[i])  # For WinBUGS define 'straw man'
}
# mu[i] <- z[i]*p          # Only WinBUGS
}
}
",fill = TRUE)
sink()
# Initial values
zst <- apply(y, 1, max)       # Avoid data/model/inits conflict
inits <- function(){list(z = zst)}
# Parameters monitored
params <- c("psi", "p")
# MCMC settings
ni <- 5000   ;   nt <- 1   ;   nb <- 1000   ;   nc <- 3
library(jagsUI)
fm2 <- jags(win.data, inits, params, "model.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb)
print(fm2, dig = 3)
rm(list=ls())
# Load the libraries
library(unmarked)
library(AHMbook)
# Load the data
PA_data_NI_1km <- read.csv("1.data/1.2.processed/PA_data_NI_1km.csv")
# Load the data
PA_data_NI_1km <- read.csv("C:/VScode/all-ireland-occupancy-modelling/1.data/1.2.processed/1.2.2.PA_data_NI_1km.csv")
View(PA_data_NI_1km)
check data format
y <- as.matrix(PA_data_NI_1km[, grep("Day", colnames(PA_data_NI_1km))])
y <- y[rowSums(!is.na(y)) > 0, ]
# Create an unmarkedFrame object
umf <- unmarkedFrameOccu(y = y)
# Check data structure
summary(umf)
# Fit basic occupancy model
fm1 <- occu(~1 ~1, data = umf)
# View results
summary(fm1)
backTransform(fm1, "state")      # Get estimates on probability scale
backTransform(fm1, "det")
# Bundle data and summarize data bundle
str( win.data <- list(y = y, M = nrow(y), J = ncol(y)) )
# Specify model in BUGS language
sink("model.txt")
cat("
model {
# Priors
psi ~ dunif(0, 1)
p ~ dunif(0, 1)
# Likelihood
for (i in 1:M) {    # Loop over sites
z[i] ~ dbern(psi)         # State model
for (j in 1:J) { # Loop over replicate surveys
y[i,j] ~ dbern(z[i]*p)  # Observation model (only JAGS !)
# y[i,j] ~ dbern(mu[i])  # For WinBUGS define 'straw man'
}
# mu[i] <- z[i]*p          # Only WinBUGS
}
}
",fill = TRUE)
sink()
# Initial values
zst <- apply(y, 1, max)       # Avoid data/model/inits conflict
inits <- function(){list(z = zst)}
# Parameters monitored
params <- c("psi", "p")
# MCMC settings
ni <- 5000   ;   nt <- 1   ;   nb <- 1000   ;   nc <- 3
library(jagsUI)
fm2 <- jags(win.data, inits, params, "model.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb)
print(fm2, dig = 3)
# Applied Hierarchical Modeling in Ecology
# Chapter 10
# Author: Leighanna Teal Dawson
# Date: 13/01/2025
# Institution: Ulster University
#
# Reference:
# Link to the book: https://www.google.co.uk/books/edition/Applied_Hierarchical_Modeling_in_Ecology/B_mcBAAAQBAJ?hl=en&gbpv=1
#### script from https://github.com/mikemeredith/AHM_code/blob/main/AHM1_ch10/AHM1_10.03.R ####
# Structure:
# Setting up your environment
# ---------------------------
##### Libraries required #######
library(unmarked)
library(AHMbook)
#### 10.3 SIMULATION AND ANALYSIS OF THE SIMPLEST POSSIBLE SITE-OCCUPANCY MODEL ####
# 10.3 Simulation and analysis of the simplest possible site-occupancy model
# --------------------------------------------------------------------------
# Choose sample sizes and prepare observed data array y
set.seed(24)                  # So we all get same data set
M <- 100                      # Number of sites
J <- 2                        # Number of presence/absence measurements
y <- matrix(NA, nrow = M, ncol = J) # to contain the obs. data
View(y)
# Parameter values
psi <- 0.8                    # Probability of occupancy or presence
p <- 0.5                      # Probability of detection
# Generate presence/absence data (the truth)
z <- rbinom(n = M, size = 1, prob = psi)  # R has no Bernoulli
# Generate detection/nondetection data (i.e. presence/absence measurements)
for(j in 1:J){
y[,j] <- rbinom(n = M, size = 1, prob = z*p)
}
# Look at data
sum(z)                        # True number of occupied sites
sum(apply(y, 1, max))         # Observed number of occupied sites
head(cbind(z=z, y))           # Truth and measurements for first 6 sites
library(unmarked)
umf <- unmarkedFrameOccu(y = y)  # Create unmarked data frame
View(umf)
class(umf)
head(umf)
summary(umf)                     # Summarize data frame
(fm1 <- occu(~1 ~1, data = umf)) # Fit model
backTransform(fm1, "state")      # Get estimates on probability scale
backTransform(fm1, "det")
# Bundle data and summarize data bundle
str( win.data <- list(y = y, M = nrow(y), J = ncol(y)) )
# Specify model in BUGS language
sink("model.txt")
cat("
model {
# Priors
psi ~ dunif(0, 1)
p ~ dunif(0, 1)
# Likelihood
for (i in 1:M) {    # Loop over sites
z[i] ~ dbern(psi)         # State model
for (j in 1:J) { # Loop over replicate surveys
y[i,j] ~ dbern(z[i]*p)  # Observation model (only JAGS !)
# y[i,j] ~ dbern(mu[i])  # For WinBUGS define 'straw man'
}
# mu[i] <- z[i]*p          # Only WinBUGS
}
}
",fill = TRUE)
sink()
# Initial values
zst <- apply(y, 1, max)       # Avoid data/model/inits conflict
inits <- function(){list(z = zst)}
# Parameters monitored
params <- c("psi", "p")
# MCMC settings
ni <- 5000   ;   nt <- 1   ;   nb <- 1000   ;   nc <- 3
# Call JAGS and summarize posteriors
install.packages("jagsUI")
library(jagsUI)
fm2 <- jags(win.data, inits, params, "model.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb)
print(fm2, dig = 3)
# Applied Hierarchical Modeling in Ecology
# Chapter 10
# Author: Leighanna Teal Dawson
# Date: 13/01/2025
# Institution: Ulster University
#
# Reference:
# Link to the book: https://www.google.co.uk/books/edition/Applied_Hierarchical_Modeling_in_Ecology/B_mcBAAAQBAJ?hl=en&gbpv=1
#### script from https://github.com/mikemeredith/AHM_code/blob/main/AHM1_ch10/AHM1_10.03.R ####
# Structure:
# Setting up your environment
# ---------------------------
##### Libraries required #######
library(unmarked)
library(AHMbook)
#### 10.3 SIMULATION AND ANALYSIS OF THE SIMPLEST POSSIBLE SITE-OCCUPANCY MODEL ####
# 10.3 Simulation and analysis of the simplest possible site-occupancy model
# --------------------------------------------------------------------------
# Choose sample sizes and prepare observed data array y
set.seed(24)                  # So we all get same data set
M <- 100                      # Number of sites
J <- 2                        # Number of presence/absence measurements
y <- matrix(NA, nrow = M, ncol = J) # to contain the obs. data
View(y)
# Parameter values
psi <- 0.8                    # Probability of occupancy or presence
p <- 0.5                      # Probability of detection
# Generate presence/absence data (the truth)
z <- rbinom(n = M, size = 1, prob = psi)  # R has no Bernoulli
# Generate detection/nondetection data (i.e. presence/absence measurements)
for(j in 1:J){
y[,j] <- rbinom(n = M, size = 1, prob = z*p)
}
# Look at data
sum(z)                        # True number of occupied sites
sum(apply(y, 1, max))         # Observed number of occupied sites
head(cbind(z=z, y))           # Truth and measurements for first 6 sites
library(unmarked)
umf <- unmarkedFrameOccu(y = y)  # Create unmarked data frame
View(umf)
class(umf)
head(umf)
summary(umf)                     # Summarize data frame
(fm1 <- occu(~1 ~1, data = umf)) # Fit model
backTransform(fm1, "state")      # Get estimates on probability scale
backTransform(fm1, "det")
# Bundle data and summarize data bundle
str( win.data <- list(y = y, M = nrow(y), J = ncol(y)) )
# Specify model in BUGS language
sink("model.txt")
cat("
model {
# Priors
psi ~ dunif(0, 1)
p ~ dunif(0, 1)
# Likelihood
for (i in 1:M) {    # Loop over sites
z[i] ~ dbern(psi)         # State model
for (j in 1:J) { # Loop over replicate surveys
y[i,j] ~ dbern(z[i]*p)  # Observation model (only JAGS !)
# y[i,j] ~ dbern(mu[i])  # For WinBUGS define 'straw man'
}
# mu[i] <- z[i]*p          # Only WinBUGS
}
}
",fill = TRUE)
sink()
# Initial values
zst <- apply(y, 1, max)       # Avoid data/model/inits conflict
inits <- function(){list(z = zst)}
# Parameters monitored
params <- c("psi", "p")
# MCMC settings
ni <- 5000   ;   nt <- 1   ;   nb <- 1000   ;   nc <- 3
# Call JAGS and summarize posteriors
install.packages("jagsUI")
library(jagsUI)
fm2 <- jags(win.data, inits, params, "model.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb)
print(fm2, dig = 3)
install.packages("jagsUI")
library(AICcmodavg)
library(tidyr)
verion
version
Rgui.exe
version
library(unmarked)
library(tidyverse)
# ~~~~ impact of changes in R 4.0 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The default for options("stringsAsFactors"), used in 'data.frame', changed from
# TRUE to FALSE. This affects older versions of 'unmarked' and 'AICcmodavg', so
# reset the old default as a temporary measure.
if(packageVersion("unmarked") <= '1.0.0' || packageVersion("AICcmodavg") <= '2.2.2')
# reformat data for use in this package
# merge PA Pm data with merged data
merge1km <- read.csv("C:\VScode\all-ireland-occupancy-modelling\1.data\1.data/1.3.processedinarc/compiled1km.csv")
# reformat data for use in this package
# merge PA Pm data with merged data
merge1km <- read.csv("C:/VScode/all-ireland-occupancy-modelling/1.data/1.data/1.3.processedinarc/compiled1km.csv")
setwd("C:/VScode/all-ireland-occupancy-modelling")
# reformat data for use in this package
# merge PA Pm data with merged data
merge1km <- read.csv("1.data/1.data/1.3.processedinarc/compiled1km.csv")
PA_data_NI_1km <- read.csv("1.data/1.2.processed/input_data_test1km.csv")
# reformat data for use in this package
# merge PA Pm data with merged data
merge1km <- read.csv("1.data/1.3.processedinarc/compiled1km.csv")
PA_data_NI_1km <- read.csv("1.data/1.2.processed/input_data_test1km.csv")
#rename columns to match
PA_data_NI_1km$gridid <- PA_data_NI_1km$X1km_square
#keep only cols needed to avoid confusion
PA_data_NI_1km <- PA_data_NI_1km %>% select(gridid, route,
detection_2015, detection_2018, detection_2020,
date_2015, date_2018, date_2020,
duration_2015, duration_2018, duration_2020)
View(PA_data_NI_1km)
#add new col to PA_data_NI_1km called samplelled where 1 is added to this df for later
PA_data_NI_1km$sampled <- 1
# Merge PA data with the 1km merged data, keeping all rows in PA_data_NI_1km
data_full <- merge(merge1km, PA_data_NI_1km, by = "gridid", all.x = TRUE)
colnames(PA_data_NI_1km)
#create new df of only PA Pm data with covariates needed for analysis (ie remove rows with na in detection columns)
PA_data_NI_1km_with_cov <- data_full %>%
filter(sampled == 1) %>%  # Keep rows where sampled == 1
View(PA_data_NI_1km_with_cov)
# Filter out rows where 'sampled' is 1
PA_data_NI_1km_with_cov <- data_full %>%
filter(sampled == 1)  # Keep rows where sampled == 1
# View the resulting dataframe to check
View(PA_data_NI_1km_with_cov)
# 10.9 Distribution modeling and mapping of Swiss red squirrels
# =============================================================
## Code modified to use my PA PM data
# data being used
data <- PA_data_NI_1km_with_cov
# create detection matrix with my data
y <- as.matrix(data[, c("detection_2015", "detection_2018", "detection_2020")])
# get covariates urban and forest
urban.orig <- data[,"urban"]      # Unstandardised, original values of covariates
forest.orig <- data[,"forest"]
# create time matrix
nrow_data <-nrow(data)
time <- matrix(as.character(1:3), nrow=nrow_data, ncol = 3, byrow = TRUE)
# create date and duration matrix
date.orig <- as.matrix(data[, c("date_2020", "date_2018", "date_2015")])
dur.orig <- as.matrix(data[, c("duration_2020", "duration_2018", "duration_2015")])
# Overview of covariates
covs <- cbind(urban.orig, forest.orig, date.orig, dur.orig)
op <- par(mfrow = c(3,3))
for(i in 1:8){
hist(covs[,i], breaks = 50, col = "grey", main = colnames(covs)[i])
}
pairs(cbind(urban.orig, forest.orig, date.orig, dur.orig))
par(op)
# Standardize covariates and mean-impute date and duration
# Compute means and standard deviations
(means <- c(apply(cbind(urban.orig, forest.orig), 2, mean),
date.orig = mean(c(date.orig), na.rm = TRUE), dur.orig=mean(c(dur.orig),
na.rm = TRUE)))
(sds <- c(apply(cbind(urban.orig, forest.orig), 2, sd),
date.orig = sd(c(date.orig), na.rm = TRUE), dur.orig=sd(c(dur.orig),
na.rm = TRUE)))
# Scale covariates
urban <- (urban.orig - means[1]) / sds[1]
forest <- (forest.orig - means[2]) / sds[2]
date <- (date.orig - means[3]) / sds[3]
date[is.na(date)] <- 0
dur <- (dur.orig - means[4]) / sds[4]
dur[is.na(dur)] <- 0
# Load unmarked, format data and summarize
library(unmarked)
umf <- unmarkedFrameOccu(y = y, siteCovs = data.frame(urban = urban, forest = forest),
obsCovs = list(time = time, date = date, dur = dur))
summary(umf)
# Fit a series of models for detection first and do model selection
summary(fm1 <- occu(~1 ~1, data=umf))
summary(fm2 <- occu(~date ~1, data=umf))
summary(fm3 <- occu(~date+I(date^2) ~1, data=umf))
summary(fm4 <- occu(~date+I(date^2)+I(date^3) ~1, data=umf))
summary(fm5 <- occu(~dur ~1, data=umf))
summary(fm6 <- occu(~date+dur ~1, data=umf))
summary(fm7 <- occu(~date+I(date^2)+dur ~1, data=umf))
summary(fm8 <- occu(~date+I(date^2)+I(date^3)+dur ~1, data=umf))
summary(fm9 <- occu(~dur+I(dur^2) ~1, data=umf))
summary(fm10 <- occu(~date+dur+I(dur^2) ~1, data=umf))
summary(fm11 <- occu(~date+I(date^2)+dur+I(dur^2) ~1, data=umf))
summary(fm12 <- occu(~date+I(date^2)+I(date^3)+dur+I(dur^2) ~1, data=umf))
# Put the fitted models in a "fitList" and rank them by AIC
fms <- fitList("p(.)psi(.)"                     = fm1,
"p(date)psi(.)"                      = fm2,
"p(date+date2)psi(.)"                = fm3,
"p(date+date2+date3)psi(.)"          = fm4,
"p(dur)psi(.)"                       = fm5,
"p(date+dur)psi(.)"                  = fm6,
"p(date+date2+dur)psi(.)"            = fm7,
"p(date+date2+date3+dur)psi(.)"      = fm8,
"p(dur+dur2)psi(.)"                  = fm9,
"p(date+dur+dur2)psi(.)"             = fm10,
"p(date+date2+dur+dur2)psi(.)"       = fm11,
"p(date+date2+date3+dur+dur2)psi(.)" = fm12)
(ms <- modSel(fms))
# Continue with model fitting for occupancy, guided by AIC as we go
# Check effects of urban
summary(fm13 <- occu(~date+dur+I(dur^2) ~urban, data=umf))
summary(fm14 <- occu(~date+dur+I(dur^2) ~urban+I(urban^2), data=umf))
summary(fm15 <- occu(~date+dur+I(dur^2) ~urban+I(urban^2)+ I(urban^3), data=umf))
cbind(fm13@AIC, fm14@AIC, fm15@AIC) # model 15 is best
# Check effects of forest and interactions
summary(fm16 <- occu(~date+dur+I(dur^2) ~urban+I(urban^2)+forest, data=umf))
summary(fm17 <- occu(~date+dur+I(dur^2) ~urban+I(urban^2)+forest+I(forest^2),
data=umf))
summary(fm18 <- occu(~date+dur+I(dur^2) ~urban+I(urban^2)+forest+I(forest^2)+
urban:forest, data=umf))
summary(fm19 <- occu(~date+dur+I(dur^2) ~urban+I(urban^2)+forest+I(forest^2)+
urban:forest+urban:I(forest^2), data=umf))
summary(fm20 <- occu(~date+dur+I(dur^2) ~urban+I(urban^2)+forest+I(forest^2)+
urban:forest+urban:I(forest^2)+I(urban^2):forest, data=umf))
summary(fm21 <- occu(~date+dur+I(dur^2) ~urban+I(urban^2)+forest+I(forest^2)+
urban:forest+urban:I(forest^2)+I(urban^2):forest+ I(urban^2):I(forest^2), data=umf))
cbind(fm16@AIC, fm17@AIC, fm18@AIC, fm19@AIC, fm20@AIC) # model 16 is best
# Check for some additional effects in detection
summary(fm22 <- occu(~date+dur+I(dur^2)+urban ~urban+I(urban^2)+
forest+I(forest^2)+urban:forest+urban:I(forest^2)+I(urban^2):forest, data=umf))
summary(fm23 <- occu(~dur+I(dur^2)+date*(urban+I(urban^2)) ~urban+I(urban^2)+
forest+I(forest^2)+urban:forest+urban:I(forest^2)+I(urban^2):forest, data=umf))
summary(fm24 <- occu(~dur+I(dur^2)+date*(urban+I(urban^2))+forest ~urban+I(urban^2)+
forest+I(forest^2)+urban:forest+urban:I(forest^2)+I(urban^2):forest, data=umf))
cbind(fm22@AIC, fm23@AIC, fm24@AIC)
# OPTIONAL: Store results in a dataframe for easy viewing
aic_results <- data.frame(Model = c("fm13", "fm14", "fm15", "fm16", "fm17", "fm18",
"fm19", "fm20", "fm22", "fm23", "fm24"),
AIC = c(fm13@AIC, fm14@AIC, fm15@AIC, fm16@AIC, fm17@AIC,
fm18@AIC, fm19@AIC, fm20@AIC, fm22@AIC, fm23@AIC, fm24@AIC))
aic_results <- aic_results[order(aic_results$AIC), ]  # Sort by AIC (ascending)
print(aic_results)  # Best model is at the top which is fm23
#########################################################################################
library(AICcmodavg)
# system.time(gof.boot <- mb.gof.test(fm20, nsim = 1000, parallel=FALSE))
system.time(gof.boot <- mb.gof.test(fm23, nsim = 10, parallel=FALSE))  # ~~~ for testing
print("Done")
